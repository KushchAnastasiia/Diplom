swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Med API"
  contact:
    email: "admin@admin.com"
host: "localhost:8000"
basePath: "/"
# host: "petstore.swagger.io"
# basePath: "/v2"
tags:
- name: "equipment"
  description: "CRUD equipment"
- name: "user"
  description: "Operations about user"
schemes:
# - "https"
- "http"
securityDefinitions:
  Token:
    description: |
     For accessing the API a valid token must be passed in all the queries in
     the 'Authorization' header.
     A valid token is generated by the API and returned as answer of a call
     to the route /login giving a valid user & password.
     The following syntax must be used in the 'Authorization' header :
                    Value: apiKey
    type: apiKey
    name: Authorization
    in: headers
paths:
  /api/equipment/:
    get:
      tags:
        - "equipment"
      summary: "Get equipment list"
      description: "Get equipment list"
      x-swagger-router-controller: SampleController
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: "ok"
  /api/auth/user/:
    get:
      tags:
        - "user"
      summary: "Get user data"
      description: "Get equipment list"
      x-swagger-router-controller: SampleController
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: "ok"
      security:
      - Token: []
  /api/auth/register/:
    post:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: register
      produces:
      - application/json
      parameters:
      - name: email
        in: formData
        description: The user email
        required: true
        type: string
      - name: username
        in: formData
        description: The user username
        required: true
        type: string
      - name: password
        in: formData
        description: The password
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        "400":
          description: Invalid username/password supplied
definitions:
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"